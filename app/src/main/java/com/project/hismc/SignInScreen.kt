package com.project.hismc

import android.util.Log
import android.widget.Toast
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowForward
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.CompositingStrategy
import androidx.compose.ui.graphics.drawscope.rotate
import androidx.compose.ui.graphics.drawscope.translate
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.zIndex
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.project.hismc.auth.AuthRequest
import com.project.hismc.auth.AuthRepository
import com.project.hismc.auth.AuthResponse
import com.project.hismc.auth.AuthViewModel
import com.project.hismc.auth.LoginRequest
import com.project.hismc.ui.theme.HismcTheme
import kotlinx.coroutines.launch
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

// SignInScreen.kt
@Composable
fun SignInScreen(navController: NavController, userViewModel: UserViewModel) {
    var grade by remember { mutableStateOf("") }
    var classNo by remember { mutableStateOf("") }
    var studentNo by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }

    val context = LocalContext.current
    val authViewModel: AuthViewModel = viewModel()
    val coroutineScope = rememberCoroutineScope()

    // UserViewModelÏóêÏÑú ÌïôÍ≥º Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    val major by userViewModel.major.collectAsState()

    // ‚úÖ ÎîîÎ≤ÑÍπÖ: ÌôîÎ©¥ ÏßÑÏûÖ Ïãú ÏÉÅÌÉú ÌôïÏù∏
    LaunchedEffect(Unit) {
        Log.d("SignInScreen", "SignInScreen ÏãúÏûë - UserViewModel: $userViewModel")
        Log.d("SignInScreen", "ÌòÑÏû¨ major Í∞í: $major")
        Log.d("SignInScreen", "ÏßÅÏ†ë getMajor(): ${userViewModel.getMajor()}")
    }

    // ‚úÖ major Í∞íÏù¥ Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ Î°úÍ∑∏ Ï∂úÎ†•
    LaunchedEffect(major) {
        Log.d("SignInScreen", "major Í∞í Î≥ÄÍ≤ΩÎê®: $major")
    }

    // ÌïôÎ≤à(studentId) ÏÉùÏÑ±
    fun generateStudentId(grade: String, classNo: String, studentNo: String): String {
        val classStr = classNo.padStart(2, '0')
        val numStr = studentNo.padStart(2, '0')
        return grade + classStr + numStr
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
    ) {
        // ÏÉÅÎã® Ïõê, Ïù¥ÎØ∏ÏßÄ, ÌÉÄÏù¥ÌãÄ
        Box(modifier = Modifier.fillMaxSize()) {
            Canvas(
                modifier = Modifier
                    .fillMaxSize()
                    .statusBarsPadding()
                    .graphicsLayer(compositingStrategy = CompositingStrategy.ModulateAlpha)
            ) {
                translate(left = -80f, top = -1000f) {
                    drawCircle(Color(0xff40CEF2), radius = 350.dp.toPx())
                }
            }
            Image(
                painter = painterResource(id = R.drawable.smc_ms2),
                contentDescription = "ÌïôÍµê ÎßàÏä§ÏΩîÎìú",
                modifier = Modifier.size(300.dp).offset(x = 170.dp, y = 30.dp)
            )
            Text(
                text = "Sign In",
                fontSize = 60.sp,
                fontWeight = FontWeight.ExtraBold,
                color = Color.White,
                modifier = Modifier.offset(x = 30.dp, y = 260.dp)
            )
        }

        // ‚úÖ ÌïôÍ≥º ÌëúÏãú Ïπ¥Îìú (ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥ Ìè¨Ìï®)
        /*major?.let { selectedMajor ->
            Log.d("SignInScreen", "ÌïôÍ≥º Ïπ¥Îìú ÌëúÏãú: $selectedMajor")
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(80.dp)
                    .padding(horizontal = 30.dp)
                    .offset(y = 420.dp),
                shape = RoundedCornerShape(20.dp),
                colors = CardDefaults.cardColors(containerColor = Color(0xFFE3F2FD)),
                elevation = CardDefaults.cardElevation(8.dp)
            ) {
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    Text(
                        text = "üìò ÏÑ†ÌÉùÎêú ÌïôÍ≥º: $selectedMajor",
                        fontSize = 16.sp,
                        fontWeight = FontWeight.Medium,
                        color = Color(0xFF1E3A8A)
                    )
                }
            }
        } ?: run {
            // ‚úÖ majorÍ∞Ä nullÏù∏ Í≤ΩÏö∞ ÎîîÎ≤ÑÍπÖ Ï†ïÎ≥¥ ÌëúÏãú
            Log.d("SignInScreen", "ÌïôÍ≥º Ï†ïÎ≥¥Í∞Ä nullÏûÑ")
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(80.dp)
                    .padding(horizontal = 30.dp)
                    .offset(y = 420.dp),
                shape = RoundedCornerShape(20.dp),
                colors = CardDefaults.cardColors(containerColor = Color(0xFFFFEBEE)),
                elevation = CardDefaults.cardElevation(8.dp)
            ) {
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    Text(
                        text = "‚ö†Ô∏è ÌïôÍ≥º Ï†ïÎ≥¥ ÏóÜÏùå (ÎîîÎ≤ÑÍπÖ)",
                        fontSize = 16.sp,
                        fontWeight = FontWeight.Medium,
                        color = Color(0xFFD32F2F)
                    )
                }
            }
        }*/

        // Î°úÍ∑∏Ïù∏ ÏûÖÎ†•ÎûÄ
        Box(modifier = Modifier.fillMaxSize()) {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(top = 520.dp), // Í≥†Ï†ïÎêú ÏúÑÏπò ÏÇ¨Ïö©
                verticalArrangement = Arrangement.Top,
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                // ÌïôÎÖÑ, Î∞ò, Î≤àÌò∏ (Í∞ÄÎ°ú Î∞∞Ïπò)
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceEvenly,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    CurvedNumberPicker(
                        label = "ÌïôÎÖÑ",
                        range = 1..3,
                        selectedValue = grade.toIntOrNull() ?: 1,
                        onValueChange = { grade = it.toString() },
                        modifier = Modifier.weight(1f)
                    )
                    CurvedNumberPicker(
                        label = "Î∞ò",
                        range = 1..9,
                        selectedValue = classNo.toIntOrNull() ?: 1,
                        onValueChange = { classNo = it.toString() },
                        modifier = Modifier.weight(1f)
                    )
                    CurvedNumberPicker(
                        label = "Î≤àÌò∏",
                        range = 1..25,
                        selectedValue = studentNo.toIntOrNull() ?: 1,
                        onValueChange = { studentNo = it.toString() },
                        modifier = Modifier.weight(1f)
                    )
                }

                Spacer(modifier = Modifier.height(12.dp))

                // ÎπÑÎ∞ÄÎ≤àÌò∏
                OutlinedTextField(
                    modifier = Modifier.height(60.dp).width(350.dp),
                    value = password,
                    onValueChange = { password = it },
                    shape = RoundedCornerShape(20.dp),
                    label = { Text("ÎπÑÎ∞ÄÎ≤àÌò∏") }
                )
            }
        }

        // ÌïòÎã® Ïõê, Back Î≤ÑÌäº
        Box(modifier = Modifier.fillMaxSize()) {
            Canvas(
                modifier = Modifier
                    .fillMaxSize()
                    .statusBarsPadding()
                    .graphicsLayer(compositingStrategy = CompositingStrategy.ModulateAlpha)
            ) {
                rotate(degrees = -3f) {
                    translate(left = -400f, top = 1150f) {
                        drawCircle(Color(0xff40CEF2), radius = 110.dp.toPx())
                    }
                }
            }
            Row(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(bottom = 30.dp, start = 30.dp),
                verticalAlignment = Alignment.Bottom
            ) {
                TextButton(
                    onClick = { navController.navigate(Screen.SignUp.route) },
                    shape = ButtonDefaults.shape
                ) {
                    Text(
                        text = "Back",
                        color = Color.White,
                        fontSize = 24.sp,
                        fontWeight = FontWeight.Normal,
                        textDecoration = TextDecoration.Underline
                    )
                }
            }
        }

        // Start Î≤ÑÌäº + ÏÑúÎ≤Ñ Î°úÍ∑∏Ïù∏
        Row(
            modifier = Modifier
                .fillMaxSize()
                .padding(top = 700.dp, start = 220.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Text(
                text = "Start",
                fontSize = 30.sp,
                fontWeight = FontWeight.Medium
            )
            Spacer(modifier = Modifier.width(12.dp))
            FloatingActionButton(
                onClick = {
                    if (grade.isBlank() || classNo.isBlank() || studentNo.isBlank() || password.isBlank()) {
                        Toast.makeText(context, "Î™®Îì† Ï†ïÎ≥¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.", Toast.LENGTH_SHORT).show()
                        return@FloatingActionButton
                    }

                    val studentId = generateStudentId(grade, classNo, studentNo)
                    val request = LoginRequest(studentId = studentId, password = password)

                    Log.d("SignInScreen", "Î°úÍ∑∏Ïù∏ ÏãúÎèÑ - ÌòÑÏû¨ major: $major")

                    coroutineScope.launch {
                        try {
                            val response = AuthRepository.api.login(request)
                            if (response.isSuccessful && response.body()?.success == true) {
                                Toast.makeText(context, "Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ!", Toast.LENGTH_SHORT).show()
                                Log.d("SignInScreen", "Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ - ÌôàÏúºÎ°ú Ïù¥Îèô")

                                // ‚úÖ Ìôà ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
                                navController.navigate(Screen.Home.route) {
                                    popUpTo(Screen.SignIn.route) { inclusive = true }
                                }
                            } else {
                                Toast.makeText(context, response.body()?.message ?: "Î°úÍ∑∏Ïù∏ Ïã§Ìå®", Toast.LENGTH_SHORT).show()
                            }
                        } catch (e: Exception) {
                            Toast.makeText(context, "ÏÑúÎ≤Ñ Ïò§Î•ò: ${e.message}", Toast.LENGTH_SHORT).show()
                        }
                    }
                    authViewModel.login(request)
                },
                shape = CircleShape,
                contentColor = Color.White,
                containerColor = Color.Black,
                modifier = Modifier.size(50.dp),
            ) {
                Icon(Icons.Filled.ArrowForward, "Î°úÍ∑∏Ïù∏ Î≤ÑÌäº")
            }
        }
    }
}